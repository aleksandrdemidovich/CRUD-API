(()=>{"use strict";var e={729:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.deleteUser=t.updateUser=t.createUser=t.getUserById=t.getUsers=void 0;const s=r(421),n=r(828),i=r(223);t.getUsers=function(e,t){const r=(0,s.find)();t.statusCode=200,t.end(JSON.stringify(r))},t.getUserById=function(e,t){const r=e.url?.split("/")[3];if(!r||!(0,n.validate)(r))return t.statusCode=400,void t.end(JSON.stringify({error:"User ID is invalid (not uuid)"}));const i=(0,s.findOneById)(r);i?(t.statusCode=200,t.end(JSON.stringify(i))):(t.statusCode=404,t.end(JSON.stringify({error:"User not found"})))},t.createUser=function(e,t){let r,n="";e.on("data",(e=>{n+=e.toString()})),e.on("end",(()=>{try{const{username:e,age:d,hobbies:a}=JSON.parse(n);if((0,i.validateRequiredFields)(e,d,a))return t.statusCode=400,void t.end(JSON.stringify({error:"Missing required fields"}));if(r=(0,i.validateFieldsType)(e,d,a))return t.statusCode=400,void t.end(JSON.stringify({error:r}));const o=(0,s.createOne)(e,d,a);t.statusCode=201,t.end(JSON.stringify(o))}catch(e){t.statusCode=400,t.end(JSON.stringify({error:"Invalid request body"}))}}))},t.updateUser=function(e,t){let r;const d=e.url?.split("/")[3];if(!d||!(0,n.validate)(d))return t.statusCode=400,void t.end(JSON.stringify({error:"User ID is invalid (not uuid)"}));let a="";e.on("data",(e=>{a+=e.toString()})),e.on("end",(()=>{try{const{username:e,age:n,hobbies:o}=JSON.parse(a);if((0,i.validateRequiredFields)(e,n,o))return t.statusCode=400,void t.end(JSON.stringify({error:"Missing required fields"}));if(r=(0,i.validateFieldsType)(e,n,o))return t.statusCode=404,void t.end(JSON.stringify({error:r}));const u=(0,s.updateOne)(d,e,n,o);u?(t.statusCode=200,t.end(JSON.stringify(u))):(t.statusCode=404,t.end(JSON.stringify({error:"User not found"})))}catch(e){t.statusCode=400,t.end(JSON.stringify({error:"Invalid request body"}))}}))},t.deleteUser=function(e,t){const r=e.url?.split("/")[3];if(!r||!(0,n.validate)(r))return t.statusCode=400,void t.end(JSON.stringify({error:"User ID is invalid (not uuid)"}));(0,s.removeOne)(r)?(t.statusCode=204,t.end()):(t.statusCode=404,t.end(JSON.stringify({error:"User not found"})))}},421:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.removeOne=t.updateOne=t.createOne=t.findOneById=t.find=void 0;const n=r(828),i=s(r(1)),d=[];function a(e){return d.find((t=>t.id===e))}function o(e,t,r){const s={id:(0,n.v4)(),username:e,age:t,hobbies:r};return d.push(s),s}function u(e,t,r,s){const n=d.findIndex((t=>t.id===e));if(-1!==n){const i={id:e,username:t,age:r,hobbies:s};return d[n]=i,i}}function f(e){const t=d.findIndex((t=>t.id===e));return-1!==t&&(d.splice(t,1),!0)}t.find=function(){return d},t.findOneById=a,t.createOne=o,t.updateOne=u,t.removeOne=f,i.default.isPrimary&&(i.default.on("message",((e,t)=>{switch(t.type){case"find":e.send({type:"find",data:d});break;case"findOneById":const r=a(t.data);e.send({type:"findOneById",data:r});break;case"createOne":const s=o(t.data.username,t.data.age,t.data.hobbies);e.send({type:"createOne",data:s});break;case"updateOne":const n=u(t.data.id,t.data.username,t.data.age,t.data.hobbies);e.send({type:"updateOne",data:n});break;case"removeOne":const i=f(t.data);e.send({type:"removeOne",data:i})}})),i.default.on("exit",((e,t,r)=>{console.log(`Worker ${e.process.pid} died`),i.default.fork()})))},607:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(r(685)),i=s(r(142)),d=r(14);i.default.config();const a=n.default.createServer(((e,t)=>{t.setHeader("Content-Type","application/json"),(0,d.handleUsersRequest)(e,t)})),o=process.env.PORT||4e3;a.listen(o,(()=>{console.log(`Server is running on port ${o}`)})),t.default=a},14:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.handleUsersRequest=void 0;const s=r(729);t.handleUsersRequest=function(e,t){const{method:r,url:n}=e;"GET"===r&&"/api/users"===n?(0,s.getUsers)(e,t):"GET"===r&&n?.startsWith("/api/users/")?(0,s.getUserById)(e,t):"POST"===r&&"/api/users"===n?(0,s.createUser)(e,t):"PUT"===r&&n?.startsWith("/api/users/")?(0,s.updateUser)(e,t):"DELETE"===r&&n?.startsWith("/api/users/")?(0,s.deleteUser)(e,t):(t.statusCode=404,t.setHeader("Content-Type","application/json"),t.end(JSON.stringify({error:"Endpoint not found"})))}},223:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validateFieldsType=t.validateRequiredFields=void 0,t.validateRequiredFields=(e,t,r)=>{if(!e||!t||!r)return!0},t.validateFieldsType=(e,t,r)=>{const s={username:"string"!=typeof e?"Username must be a string":"",age:"number"!=typeof t?"Age must be a number":"",hobbies:Array.isArray(r)&&r.every((e=>"string"==typeof e))?"":"Hobbies must be an array of strings or empty"},n=Object.entries(s).filter((([,e])=>""!==e)).reduce(((e,[t,r])=>({...e,[t]:r})),{});return Object.keys(n).length?n:null}},142:e=>{e.exports=require("dotenv")},828:e=>{e.exports=require("uuid")},1:e=>{e.exports=require("cluster")},685:e=>{e.exports=require("http")}},t={};!function r(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s].call(i.exports,i,i.exports,r),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,